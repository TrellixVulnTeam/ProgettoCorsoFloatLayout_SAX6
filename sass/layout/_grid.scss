/* definiamo la riga in posizione centrale con il margin 0 aut*/
.row {
  max-width: $grid-width;
  margin: 0 auto;

  &:not(:last-child) {
    //diamo queste regole a tutti gli elementi tranne che all'ultimo
      margin-bottom: $gutter-vertical;
      @include respond(tab-port) {
        margin-bottom: $gutter-vertical-small; 
       }  
  }

  @include respond(tab-port) {
    max-width: 50rem; //la riga occupa 50 rem anziche 114
    padding:0 3rem;
  }
 
  @include clearfix;

  [class^="col-"] { // ^ -> significa: prendi tutte le classi che iniziano con "col-"
      float: left; //consigliabile farle partire sempre da sinistra

      &:not(:last-child) {
          margin-right: $gutter-horizontal;//con questa tecnica si permette di dare uno spazio tra una colonna e l'altra   
          @include respond(tab-port) {
            margin-right: 0; 
            margin-bottom: $gutter-vertical-small; 
          }
      }
      @include respond(tab-port) {
        width:100% !important; //colonne responsive ,si fa cosi per best practice ,lo mettiamo qui cosi viene adattato per tutte le colonne
      }
  }

  .col-1-of-2 {
      width: calc((100% - #{$gutter-horizontal}) / 2); /*calcola in automatico la larghezza in modo da essere responsivo*/
      
  }

  .col-1-of-3 {
      width: calc((100% - 2 * #{$gutter-horizontal}) / 3);/*calcola in automatico la larghezza in modo da essere responsivo*/
  }

  .col-2-of-3 {
      width: calc(2 * ((100% - 2 * #{$gutter-horizontal}) / 3) + #{$gutter-horizontal});
  }

  .col-1-of-4 {
      width: calc((100% - 3 * #{$gutter-horizontal}) / 4);
  }

  .col-2-of-4 {
      width: calc(2 * ((100% - 3 * #{$gutter-horizontal}) / 4) + #{$gutter-horizontal});
  }

  .col-3-of-4 {
      width: calc(3 * ((100% - 3 * #{$gutter-horizontal}) / 4) + 2 * #{$gutter-horizontal});
  }

}