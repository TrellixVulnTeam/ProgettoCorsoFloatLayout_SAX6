@charset "UTF-8";
/* IMPORT*/
/* VARIABILI */
/* animazioni,la translate al punto 0 è x che va da sx a dx (x quello negativo)*/
@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-10rem); }
  80% {
    transform: translate(1rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

/* animazioni,la translate al punto 0 è x che va da dx a sx (x quello positivo)*/
@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(10rem); }
  80% {
    transform: translate(-1rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

/* animazioni,la translate al punto 0 è y che va dal baso verso l'alto(x quello positivo)*/
@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(3rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

/* questa parte è detta global reset ,selettore universale per adattare a ogni pagina web,aggiungiamo anche gli pseudo elementi per best-practice,
   in modo che il comportamento che hanno gli elementi reali lo abbiano anche gli pseudo elementi */
*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  box-sizing: inherit;
  /*ereditarieta, best practice metterlo qui e nel body mettere il border box*/ }

/*root impostato a 10 px in modo che possiamo convertire tutte le unità di misura in rem : 1rem=10px*/
html {
  font-size: 62.5%;
  /*equivale a 10 px,in quanto di default il font è 16px,percio'faccio x(nel mio caso 10)/16*100 */ }

/*carattere generale */
body {
  box-sizing: border-box; }

/*Questa parte del body riguarda la tipografia,per questo è stato diviso dal body presente nel file _base.scss*/
body {
  font-family: "Lato", sans-serif;
  font-weight: 400;
  line-height: 1.7;
  color: #777;
  padding: 3rem; }

/* siccome fanno parte del "blocco" heading gli elementi posso annidarli nel seguente modo usando la &(vedi html x capire il "blocco heading")*/
.heading-primary {
  /* h1 scritte */
  color: white;
  text-transform: uppercase;
  backface-visibility: hidden;
  /*nascondere sfarfallio elementi*/
  margin-bottom: 6rem;
  /* dare spazio tra i titoli e il button*/ }
  .heading-primary--main {
    /* 1 span con il display block per andare a capo, compresa di animazioni*/
    display: block;
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 1rem;
    animation-name: moveInLeft;
    /* elenco proprieta animazioni 1 a 1 da qui in giu*/
    animation-duration: 1s;
    animation-timing-function: ease-out; }
  .heading-primary--sub {
    /* 2 span con il dispaly block per andare a capo, compresa di animazioni*/
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 0.75rem;
    animation: moveInRight 1s;
    /* modalita abbreviata per scrivere il tempo e il nome dell animazione e altre proprietà*/ }

/* siccome fanno parte del "blocco" button gli elementi posso annidarli nel seguente modo usando la &*/
.btn:link, .btn:visited {
  /* link e visited sono pseduo classi,come ad esempio quando l'utente preme il bottone accade un evento,il display inline-block serve quando diamo del padding*/
  text-transform: uppercase;
  text-decoration: none;
  padding: 1.5rem 4rem;
  /*top e left*/
  display: inline-block;
  border-radius: 10rem;
  transition: all 0.2s;
  /* è un metodo che richiama le animazioni senza bisogno di specificare i nomi*/
  position: relative;
  font-size: 1.6rem; }

.btn:hover {
  /*voglio che si sposti verso l'alto con l'hover del mouse*/
  transform: translateY(-3px);
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2);
  /* x y e sfocatura*/ }
  .btn:hover::after {
    /*aumenta le dimensioni DOPO il passaggio del mouse*/
    transform: scaleX(1.4) scaleY(1.6);
    opacity: 0; }

.btn:active {
  /*quando clicco il button voglio che si sposti verso l'alto*/
  transform: translateY(-1px);
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2);
  /* x y e sfocatura*/ }

.btn--white {
  /*interno button*/
  background-color: white;
  color: #777; }
  .btn--white::after {
    /*interno button dopo il click*/
    background-color: white; }

.btn::after {
  /* fa qualcosa dopo il click del button,è un figlio del pulsante.Per lo pseudo element after bisogna sempre mettere un content,anche vuoto e il display ,
      che deve essere sempre come il pulsante originale(in questo caso inline-block) position absolute e top e left 0 in quanto è come se ci fosse un altro pulsante dietro */
  content: "";
  display: inline-block;
  /* da qui in giu le proprietà del pulsante*/
  height: 100%;
  width: 100%;
  border-radius: 10rem;
  position: absolute;
  top: 0;
  left: 0;
  z-index: -1;
  transition: all 0.4s; }

.btn--animated {
  /*animazioni pulsante con pseudo classi*/
  animation: moveInBottom 0.5s ease-out 1s;
  /*l'ultimo è il ritardo dell'animazione*/
  animation-fill-mode: backwards;
  /*fa si che il pulsante (in questo caso) non si veda finchè inizia l'animazione che in questo caso è ritardata*/ }

/* usiamo vh per la viewport ,per essere piu responsive.Immagine di background con taglio nella parte dx, + impostazioni background img 
è presente il position relative xk header è una classe padre,infatti logobox ha il position absolute.
siccome fanno parte del "blocco" header gli elementi posso annidarli nel seguente modo usando la &(vedi html x capire il "blocco header")*/
.header {
  height: 95vh;
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url(../img/hero.jpg);
  background-size: cover;
  background-position: top;
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  position: relative; }
  .header__logo-box {
    /* div dell' immagine in alto a dx , con il position absolute  dobbiamo assolutamente usare top,bottom,left,right*/
    position: absolute;
    top: 4rem;
    left: 4rem; }
  .header__logo {
    /* sempre meglio che la larghezza la gestisca il browser,l'altezza noi*/
    height: 3.5rem; }
  .header__text-box {
    /* la posizione absolute xk relative è gia nella classe padre (header),inoltre il transform serve per centrare il blocco,il text align center serve per centrare il button*/
    position: absolute;
    left: 50%;
    top: 40%;
    transform: translate(-50%, -50%);
    text-align: center; }

/* definiamo la riga in posizione centrale con il margin 0 aut*/
.row {
  max-width: 114rem;
  background-color: #eee;
  margin: 0 auto; }
  .row:not(:last-child) {
    margin-bottom: 8rem; }
  .row [class^="col-"] {
    background-color: orangered;
    color: white;
    float: left; }
    .row [class^="col-"]:not(:last-child) {
      margin-right: 6rem; }
  .row::after {
    content: "";
    clear: both;
    display: table; }
  .row .col-1-of-2 {
    width: calc((100% - 6rem) / 2);
    /*calcola in automatico la larghezza in modo da essere responsivo*/ }
  .row .col-1-of-3 {
    width: calc((100% - 2 * 6rem) / 3);
    /*calcola in automatico la larghezza in modo da essere responsivo*/
    /* background-color: orangered;
    color: white;
    float: left; 
    &:not(:last-child) { //per non ripetere questo codice visto che è gia presente su, possiamo ricorrere al selettore di attributi alla riga 12
    margin-right: $gutter-horizontal; 
    }*/ }
  .row .col-1-of-4 {
    width: calc((100% - 3 * 6rem) / 4);
    /*calcola in automatico la larghezza in modo da essere responsivo*/ }
